用户状态管理与权限控制文档

概述
本系统实现了一个基于 localStorage 的用户状态管理和权限控制机制。主要功能包括用户登录状态的检查、用户信息的存储与加载、以及对特定页面和操作的权限控制。

功能模块

1. 菜单点击处理
功能描述：
- 通过 handleMenuClick 方法处理用户的菜单点击事件。
- 根据 key 参数判断用户点击的菜单项。
- 区分用户菜单项和普通菜单项。
- 对需要登录的菜单项进行权限检查。

实现细节：
- 在 userMenuItems 和 menuItems 中查找对应的菜单项。
- 检查菜单项是否需要登录（如 profile、orders、favorites）。
- 如果未登录，提示用户登录，并将目标路径存储在 localStorage 中的 redirectPath，然后重定向到登录页面。

2. 登录状态管理
功能描述：
- 通过 checkLoginStatus 方法在页面加载时检查用户的登录状态。
- 更新页面显示的用户信息。

实现细节：
- 从 localStorage 中读取 isLoggedIn 和 userInfo。
- 如果用户已登录，解析 userInfo 并更新组件状态。
- 如果用户未登录，重置组件状态为空。

3. 用户中心页面权限控制
功能描述：
- 确保用户在访问用户中心页面时是已登录状态。
- 未登录时进行重定向。

实现细节：
- 检查 localStorage 中的 isLoggedIn 和 userInfo。
- 未登录时显示错误消息，并在 1.5 秒后重定向到登录页面。
- 已登录时加载用户信息到组件状态。

4. 数据存储方式
功能描述：
- 使用 localStorage 存储用户的登录状态和信息。

实现细节：
- isLoggedIn：布尔值，标记用户是否已登录。
- userInfo：JSON 字符串，包含用户基本信息。
- redirectPath：字符串，记录未登录时尝试访问的页面路径。

5. 页面跳转逻辑
功能描述：
- 在需要权限的操作前检查用户登录状态。
- 提示用户登录并进行页面跳转。

实现细节：
- 使用 checkLogin 方法检查登录状态。
- 未登录时显示对话框提示，并提供跳转到登录页面的选项。

安全性考虑
- 由于 localStorage 中的数据可以被客户端脚本访问，建议对敏感数据进行加密。
- 在实际应用中，建议使用更安全的存储和验证机制，如使用 JWT 进行用户认证。

结论
本系统通过简单的 localStorage 实现了用户状态管理和权限控制，适用于小型应用或开发阶段的快速实现。在生产环境中，建议结合更安全的技术和策略来保护用户数据和系统安全。